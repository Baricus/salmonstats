# largely taken from https://github.com/haskell/actions/tree/main/setup
# rather than the default "haskell action" since this seems to be multiplatform out of the box
name: build_release
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  workflow_call:
    inputs:
      upload-artifacts:
        type: boolean
        required: true

permissions:
  contents: read

jobs:
  build:
    name: GHC ${{ matrix.ghc-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ghc-version: ['9.6']

        include:
          - os: windows-latest
            ghc-version: '9.6'
          - os: macos-latest
            ghc-version: '9.6'

    steps:
      - uses: actions/checkout@v3

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell/actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
            # Defaults, added for clarity:
          cabal-version: 'latest'
          cabal-update: true

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run
          # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        run: cabal build all --only-dependencies -j

          # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v3
          # Caches are immutable, trying to save with the same key would error.
        if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all -j

      - name: Run tests
        run: cabal test all

      - name: Check cabal file
        run: cabal check

          # Docs still need to be produced and I'm not sure haddock is the best place
          # currently everything is 
          #- name: Build documentation
          #run: cabal haddock all 


      - if: upload-artifacts
        - name: Get binaries
          run: |
            mkdir out 
            cabal install --installdir out --install-method=copy

        - if: ${{ runner.os }} == "ubuntu-latest"
          name: Get sdist
          run: cabal sdist -o out

        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: ${{ runner.os }}-build-out
            path: out
